#!/usr/bin/env python

from PIL import Image
import os
import sys
import zipfile

os.environ['OPENCV_LOG_LEVEL'] = 'SILENT'
import cv2

EXTENSION_VIDEO: list[str] = ['mp4']
EXTENSION_IMAGE: list[str] = [
    'bmp', 'tiff', 'webp', 'jpg', 'jpeg', 'png', 'gif', 'psd'
]
EXTENSION_ZIP: list[str] = ['zip']

HELP: str = f'''Usage: {sys.argv[0]} <file or dir>...'''


def verify_video(video_file: str) -> tuple[bool, str]:
    try:
        video: cv2.VideoCapture = cv2.VideoCapture(video_file)
        if not video.isOpened():
            return (False, 'Failed to open video')
        while video.isOpened():
            video.read()
        return (True, 'ok')
    except Exception as e:
        return (False, str(e))


def verify_image(image_file: str) -> tuple[bool, str]:
    try:
        image: Image.Image = Image.open(image_file)
        image.verify()
        image.close()
        image = Image.open(image_file)
        image.transpose(Image.Transpose.FLIP_LEFT_RIGHT)
        return (True, 'ok')
    except Exception as e:
        return (False, str(e))


def verify_zip(zip_file: str) -> tuple[bool, str]:
    try:
        archive: zipfile.ZipFile = zipfile.ZipFile(zip_file)
        error_file: str | None = archive.testzip()
        if error_file is not None:
            return (False, f'Bad file: {error_file}')
        return (True, 'ok')
    except Exception as e:
        return (False, str(e))


def verify(file: tuple[str, str]) -> str | None:
    file_dir: str = os.path.abspath(os.path.join(file[0], file[1]))
    _, file_ext = os.path.splitext(file[1])
    file_ext = file_ext[1:]
    result: tuple[bool, str] | None = None
    if file_ext in EXTENSION_VIDEO:
        result = verify_video(file_dir)
    elif file_ext in EXTENSION_IMAGE:
        result = verify_image(file_dir)
    elif file_ext in EXTENSION_ZIP:
        result = verify_zip(file_dir)
    if result is None:
        print(f'[Unknown] {file_dir}')
    else:
        if result[0] == False:
            print(f'[Error  ] {file_dir}: {result[1]}')
            return f'{file_dir} {result[1]}'


if __name__ == '__main__':
    results: list[str | None] = []
    tasks: list[tuple[str, str]] = []
    for arg in sys.argv[1:]:
        if arg.lower() in ['-h', 'help', '--help', '?']:
            print(HELP)
            sys.exit()
        if os.path.isdir(arg):
            for directory, _, files in os.walk(arg):
                for file in files:
                    tasks.append((directory, file))
        elif os.path.isfile(arg):
            tasks.append(('./', arg))
        else:
            print(f'Unknown arg "{arg}", not a file or directory\n{HELP}')
            sys.exit()
    for task in tasks:
        results.append(verify(task))
    with open('.verify.log', 'w') as log:
        log.writelines(
            [f'{result}\n' for result in results if result is not None])
