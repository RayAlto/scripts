#!/usr/bin/python

# Rename all files in directory with index number
#
# example:
#   $ ls
#   baf bar foo
#   $ tachiyomi-sort-images ./
#   $ ls
#   001 002 003 tachiyomi-image-sort-backup.sh
#
# run 'tachiyomi-image-sort-backup.sh' to undo the rename:
#   $ ls
#   001 002 003 tachiyomi-image-sort-backup.sh
#   $ ./tachiyomi-image-sort-backup.sh
#   $ ls
#   baf bar foo
#
# add '-d' flag to do a dry run:
#   $ ls
#   baf bar foo
#   $ tachiyomi-sort-images -d ./
#   ./baf -> ./001
#   ./bar -> ./002
#   ./foo -> ./003
#   $ ls
#   baf bar foo

import os
import re
import stat
import sys
from collections.abc import Callable


def print_help() -> None:
    print(f'Usage: {sys.argv[0]} [<dir>] [-d] [-h] [--no-backup]')
    print(f'    <dir>, working directory (default: "./")')
    print(f'    -d,    dry-run')
    print(f'    -h,    help')
    print(f'    --no-backup')


def validate_dir(directory: str) -> None:
    if not os.path.isdir(directory):
        print(f'{sys.argv[0]}: "{directory}" is not a directory',
              file=sys.stderr)
        sys.exit(1)


def list_files(directory: str) -> list[str]:
    files: list[str] = [
        file for file in os.listdir(directory)
        if os.path.isfile(os.path.join(directory, file))
    ]
    files_with_index: dict[int | str, str] = {}
    for file in files:
        index_match: re.Match | None = re.search(r'\d*', file)
        if index_match is None:
            files_with_index[file] = file
        else:
            file_index: int = int(index_match.group(0))
            if files_with_index.get(file_index) is not None:
                files_with_index[file] = file
            else:
                files_with_index[file_index] = file
    max_index_digits: int = len(
        str(max([i for i in files_with_index.keys() if type(i) is int])))
    sorted_files: dict[str, str] = {}
    for index, file in files_with_index.items():
        if type(index) is int:
            sorted_files[str(index).zfill(max_index_digits)] = file
        elif type(index) is str:
            sorted_files[index] = file
    sorted_files = dict(sorted(sorted_files.items()))
    result: list[str] = [file for file in sorted_files.values()]
    return result


def get_file_extension(file_name: str) -> str | None:
    file_name_parts: list[str] = file_name.split('.')
    if len(file_name_parts) == 1:
        return None
    return file_name_parts[-1]


def action_dry_run(directory: str, file_name: str,
                   new_file_name: str) -> dict[str, str]:
    print(
        f'{os.path.join(directory,file_name)} -> {os.path.join(directory,new_file_name)}'
    )
    return {}


def action_rename(directory: str, file_name: str,
                  new_file_name: str) -> dict[str, str]:
    new_file_name_dir: str = os.path.join(directory, new_file_name)
    os.rename(file_name, new_file_name_dir)
    return {file_name: new_file_name_dir}


if __name__ == '__main__':
    directory: str = './'
    dry_run: bool = False
    no_backup: bool = False

    for arg in sys.argv[1:]:
        if arg == '-h':
            print_help()
            sys.exit(0)
        elif arg == '-d':
            dry_run = True
        elif arg == '--no-backup':
            no_backup = True
        else:
            validate_dir(arg)
            directory = arg

    files: list[str] = list_files(directory)
    file_names: list[str] = [os.path.join(directory, file) for file in files]
    file_indexes: list[int] = list(range(1, len(files) + 1))
    max_index_digits = len(str(file_indexes[-1]))

    if max_index_digits < 3:
        max_index_digits = 3

    action: Callable[[str, str, str],
                     dict[str,
                          str]] = action_dry_run if dry_run else action_rename

    rename_record: dict[str, str] = {}

    for file, file_name, index in zip(files, file_names, file_indexes):
        file_extension = get_file_extension(file)
        if file_extension:
            new_file_name = f'{str(index).zfill(max_index_digits)}.{file_extension}'
        else:
            new_file_name = f'{str(index).zfill(max_index_digits)}'
        rename_record.update(action(directory, file_name, new_file_name))

    if not no_backup and not dry_run:
        backup_sh_file_name: str = os.path.join(
            directory, 'tachiyomi-image-sort-backup.sh')
        backup_sh_file = open(backup_sh_file_name, 'w')
        backup_sh_file.write('#!/bin/sh\n')
        backup_sh_file.write(
            '#  AUTO-GENERATED by Tachiyomi Image Sort Script\n')
        for old_file, new_file in rename_record.items():
            backup_sh_file.write(
                f'mv "{os.path.abspath(new_file)}" "{os.path.abspath(old_file)}"\n'
            )
        backup_sh_file.write('rm "$0"\n')
        backup_sh_file.close()
        os.chmod(backup_sh_file_name,
                 os.stat(backup_sh_file_name).st_mode | stat.S_IEXEC)
